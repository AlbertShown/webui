# http://webui.me
# https://github.com/webui-dev/webui
# Copyright (c) 2020-2024 Hassan Draga.
# Licensed under MIT License.
# All rights reserved.
#
# Special Thanks to Turiiya (https://github.com/ttytm)

name: Windows
on:
  workflow_call:

jobs:
  setup:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bundle WebUI Bridge
        run: bridge/build.ps1
      - uses: actions/cache@v4
        with:
          path: bridge/webui_bridge.h
          key: ${{ runner.os }}-${{ github.sha }}-bridge
      - name: Install OpenSSL
        run: choco install openssl -y

  build:
    needs: setup
    runs-on: windows-latest
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - compiler: GCC
            make: mingw32-make
            tls_include: "C:\\Program Files\\OpenSSL\\include"
            tls_lib: "C:\\Program Files\\OpenSSL\\lib"
          - compiler: MSVC
            make: nmake
            tls_include: "C:\\Program Files\\OpenSSL\\include"
            tls_lib: "C:\\Program Files\\OpenSSL\\lib"
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        with:
          path: bridge/webui_bridge.h
          key: ${{ runner.os }}-${{ github.sha }}-bridge
          fail-on-cache-miss: true
      - uses: microsoft/setup-msbuild@v2
      - if: matrix.compiler == 'MSVC'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build Debug Target
        run: ${{ matrix.make }} debug
      - name: Build Release Target
        run: ${{ matrix.make }}
      - name: Build TLS Debug Target
        run: ${{ matrix.make }} WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE="${{ matrix.tls_include }}" WEBUI_TLS_LIB="${{ matrix.tls_lib }}" debug
      - name: Build TLS Release Target
        run: ${{ matrix.make }} WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE="${{ matrix.tls_include }}" WEBUI_TLS_LIB="${{ matrix.tls_lib }}"
      - name: Build examples
        run: |
          $examples_base_dir = "$(Get-Location)/examples/C/"
          foreach ($example in Get-ChildItem -Path $examples_base_dir -Directory) {
              Write-Host "> $example"
              Set-Location -Path $example.FullName
              if (!$?) {
                  $exit_code = 1
                  continue
              }
              $make_output = Invoke-Expression ${{ matrix.make }}
              if (!$?) {
                  Write-Host "Failed to build '$example': $make_output"
                  $exit_code = 1
                  continue
              }
              Write-Output $make_output
              if (!(Test-Path "main.exe") -or !(Test-Path "main-dyn.exe")) {
                  Write-Host "Failed to find executable for '$example'"
                  Get-ChildItem
                  $exit_code = 1
                  continue
              }
          }
          exit $exit_code
      - name: Prepare Artifact
        shell: bash
        run: |
          cp -r include dist
          artifact=webui-${{ runner.os }}-${{ matrix.compiler }}-x64
          # Convert to lowercase (`,,` ^= lowercase shell param)
          artifact=${artifact,,}
          # Create the directory for the artifact
          mkdir $artifact
          # Add the ARTIFACT name as GitHub environment variable.
          echo "ARTIFACT=$artifact" >> $GITHUB_ENV
          mv dist/* $artifact/
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.ARTIFACT }}
      - name: Prepare Release
        if: >
          github.event.repository.full_name == 'webui-dev/webui'
          && (github.ref_type == 'tag' || (github.ref_name == 'main' && github.event_name == 'push'))
        shell: bash
        run: |
          7z a -tzip ${{ env.ARTIFACT }}.zip ${{ env.ARTIFACT }}/*
          if [ $GITHUB_REF_TYPE == tag ]; then
            echo "TAG=$GITHUB_REF_NAME" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            now=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            echo "TAG=nightly" >> $GITHUB_ENV
            echo "BODY=Generated on <samp>$now</samp> from commit ${{ github.sha }}." >> $GITHUB_ENV
            echo "TITLE=WebUI Nightly Development Build" >> $GITHUB_ENV
          fi
      - name: Update Nightly Tag
        if: env.IS_PRERELEASE
        uses: richardsimko/update-tag@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
      - name: Release
        if: >
          github.event.repository.full_name == 'webui-dev/webui'
          && (github.ref_type == 'tag' || (github.ref_name == 'main' && github.event_name == 'push'))
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT }}.zip
          tag: ${{ env.TAG }}
          body: ${{ env.BODY }}
          name: ${{ env.TITLE }}
          prerelease: ${{ env.IS_PRERELEASE }}
          allowUpdates: true
